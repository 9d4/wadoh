// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: wadoh.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerServiceClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (ControllerService_RegisterDeviceClient, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	ReceiveMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ControllerService_ReceiveMessageClient, error)
	GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error)
	SaveWebhook(ctx context.Context, in *SaveWebhookRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*Empty, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/ControllerService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (ControllerService_RegisterDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControllerService_ServiceDesc.Streams[0], "/ControllerService/RegisterDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceRegisterDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_RegisterDeviceClient interface {
	Recv() (*RegisterDeviceResponse, error)
	grpc.ClientStream
}

type controllerServiceRegisterDeviceClient struct {
	grpc.ClientStream
}

func (x *controllerServiceRegisterDeviceClient) Recv() (*RegisterDeviceResponse, error) {
	m := new(RegisterDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ControllerService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) ReceiveMessage(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ControllerService_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControllerService_ServiceDesc.Streams[1], "/ControllerService/ReceiveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_ReceiveMessageClient interface {
	Recv() (*EventMessage, error)
	grpc.ClientStream
}

type controllerServiceReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *controllerServiceReceiveMessageClient) Recv() (*EventMessage, error) {
	m := new(EventMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerServiceClient) GetWebhook(ctx context.Context, in *GetWebhookRequest, opts ...grpc.CallOption) (*GetWebhookResponse, error) {
	out := new(GetWebhookResponse)
	err := c.cc.Invoke(ctx, "/ControllerService/GetWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) SaveWebhook(ctx context.Context, in *SaveWebhookRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ControllerService/SaveWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ControllerService/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
// All implementations must embed UnimplementedControllerServiceServer
// for forward compatibility
type ControllerServiceServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	RegisterDevice(*RegisterDeviceRequest, ControllerService_RegisterDeviceServer) error
	SendMessage(context.Context, *SendMessageRequest) (*Empty, error)
	ReceiveMessage(*Empty, ControllerService_ReceiveMessageServer) error
	GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error)
	SaveWebhook(context.Context, *SaveWebhookRequest) (*Empty, error)
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*Empty, error)
	mustEmbedUnimplementedControllerServiceServer()
}

// UnimplementedControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (UnimplementedControllerServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedControllerServiceServer) RegisterDevice(*RegisterDeviceRequest, ControllerService_RegisterDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedControllerServiceServer) SendMessage(context.Context, *SendMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedControllerServiceServer) ReceiveMessage(*Empty, ControllerService_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedControllerServiceServer) GetWebhook(context.Context, *GetWebhookRequest) (*GetWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedControllerServiceServer) SaveWebhook(context.Context, *SaveWebhookRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWebhook not implemented")
}
func (UnimplementedControllerServiceServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedControllerServiceServer) mustEmbedUnimplementedControllerServiceServer() {}

// UnsafeControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServiceServer will
// result in compilation errors.
type UnsafeControllerServiceServer interface {
	mustEmbedUnimplementedControllerServiceServer()
}

func RegisterControllerServiceServer(s grpc.ServiceRegistrar, srv ControllerServiceServer) {
	s.RegisterService(&ControllerService_ServiceDesc, srv)
}

func _ControllerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControllerService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_RegisterDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).RegisterDevice(m, &controllerServiceRegisterDeviceServer{stream})
}

type ControllerService_RegisterDeviceServer interface {
	Send(*RegisterDeviceResponse) error
	grpc.ServerStream
}

type controllerServiceRegisterDeviceServer struct {
	grpc.ServerStream
}

func (x *controllerServiceRegisterDeviceServer) Send(m *RegisterDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControllerService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).ReceiveMessage(m, &controllerServiceReceiveMessageServer{stream})
}

type ControllerService_ReceiveMessageServer interface {
	Send(*EventMessage) error
	grpc.ServerStream
}

type controllerServiceReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *controllerServiceReceiveMessageServer) Send(m *EventMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ControllerService_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControllerService/GetWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetWebhook(ctx, req.(*GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_SaveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).SaveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControllerService/SaveWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).SaveWebhook(ctx, req.(*SaveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControllerService/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControllerService_ServiceDesc is the grpc.ServiceDesc for ControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ControllerService_Status_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ControllerService_SendMessage_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _ControllerService_GetWebhook_Handler,
		},
		{
			MethodName: "SaveWebhook",
			Handler:    _ControllerService_SaveWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _ControllerService_DeleteWebhook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterDevice",
			Handler:       _ControllerService_RegisterDevice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveMessage",
			Handler:       _ControllerService_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wadoh.proto",
}
